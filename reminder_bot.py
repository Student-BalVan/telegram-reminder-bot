import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
user_tasks = {}


class ReminderTask:
    def __init__(self, user_id, task_text, reminder_time, task_id=None):
        self.task_id = task_id or f"{user_id}_{datetime.now().timestamp()}"
        self.user_id = user_id
        self.task_text = task_text
        self.reminder_time = reminder_time
        self.created_at = datetime.now()
        self.completed = False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

–Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. 

üìù **–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ** - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∑–∞–¥–∞—á—É –∏ –≤—Ä–µ–º—è
‚è∞ **–ü—Ä–∏–º–µ—Ä—ã**:
   - "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
   - "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç" 
   - "–∑–∞–≤—Ç—Ä–∞ –≤ 10:00"

üìã **–ö–æ–º–∞–Ω–¥—ã**:
/list - –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/help - —Å–ø—Ä–∞–≤–∫–∞
"""
    await update.message.reply_text(welcome_text)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìã **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**
‚Ä¢ "–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00"
‚Ä¢ "–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É"
"""
    await update.message.reply_text(help_text)


async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_tasks or not user_tasks[user_id]:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return

    tasks = user_tasks[user_id]
    task_list = "üìã **–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n\n"
    for i, task in enumerate(tasks, 1):
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if task.completed else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
        time_left = task.reminder_time - datetime.now()
        hours_left = max(0, int(time_left.total_seconds() // 3600))
        minutes_left = max(0, int((time_left.total_seconds() % 3600) // 60))

        task_list += f"{i}. {task.task_text}\n"
        task_list += f"   üïê –ß–µ—Ä–µ–∑: {hours_left}—á {minutes_left}–º–∏–Ω\n"
        task_list += f"   üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"

    await update.message.reply_text(task_list)


def parse_time(text):
    text = text.lower().strip()
    now = datetime.now()

    try:
        if "—á–µ—Ä–µ–∑" in text:
            if "–º–∏–Ω—É—Ç" in text:
                minutes = int(''.join(filter(str.isdigit, text.split("–º–∏–Ω—É—Ç")[0].split()[-1])))
                return now + timedelta(minutes=minutes)
            elif "—á–∞—Å" in text:
                hours = int(''.join(filter(str.isdigit, text.split("—á–∞—Å")[0].split()[-1])))
                return now + timedelta(hours=hours)
            elif "–¥–µ–Ω—å" in text:
                days = int(''.join(filter(str.isdigit, text.split("–¥–µ–Ω—å")[0].split()[-1])))
                return now + timedelta(days=days)

        if "–∑–∞–≤—Ç—Ä–∞" in text:
            time_part = text.split("–≤ ")[-1] if "–≤ " in text else text
            time_str = ''.join(filter(lambda x: x.isdigit() or x == ':', time_part))
            if ':' in time_str:
                hours, minutes = map(int, time_str.split(':'))
                tomorrow = now + timedelta(days=1)
                return tomorrow.replace(hour=hours, minute=minutes, second=0, microsecond=0)

        if text.startswith('–≤ ') or ' –≤ ' in text:
            time_str = ''.join(filter(lambda x: x.isdigit() or x == ':', text))
            if ':' in time_str:
                hours, minutes = map(int, time_str.split(':'))
                result = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
                if result < now:
                    result += timedelta(days=1)
                return result

        if text.isdigit():
            return now + timedelta(minutes=int(text))

    except (ValueError, IndexError):
        return None
    return None


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text.startswith('/'):
        return

    reminder_time = parse_time(text)
    if not reminder_time:
        await update.message.reply_text("‚ùå –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞' –∏–ª–∏ '–ó–∞–≤—Ç—Ä–∞ –≤ 10:00'")
        return

    task_text = text
    time_phrases = ["—á–µ—Ä–µ–∑", "–∑–∞–≤—Ç—Ä–∞", "–≤ "]
    for phrase in time_phrases:
        if phrase in task_text.lower():
            task_text = task_text.lower().split(phrase)[0].strip()
            break

    if not task_text:
        task_text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

    task = ReminderTask(user_id, task_text, reminder_time)
    if user_id not in user_tasks:
        user_tasks[user_id] = []
    user_tasks[user_id].append(task)

    asyncio.create_task(schedule_reminder(task, context.bot))

    time_diff = reminder_time - datetime.now()
    hours = int(time_diff.total_seconds() // 3600)
    minutes = int((time_diff.total_seconds() % 3600) // 60)

    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ!\nüìù {task_text}\n‚è∞ –ß–µ—Ä–µ–∑: {hours}—á {minutes}–º–∏–Ω"
    )


async def schedule_reminder(task: ReminderTask, bot):
    now = datetime.now()
    delay = (task.reminder_time - now).total_seconds()

    if delay > 0:
        await asyncio.sleep(delay)

    if (task.user_id in user_tasks and
            task in user_tasks[task.user_id] and
            not task.completed):
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task.task_id}"),
                InlineKeyboardButton("üîÑ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å", callback_data=f"snooze_{task.task_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await bot.send_message(
            chat_id=task.user_id,
            text=f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!**\n\n{task.task_text}",
            reply_markup=reply_markup
        )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    if data.startswith("done_"):
        task_id = data[5:]
        if user_id in user_tasks:
            for task in user_tasks[user_id]:
                if task.task_id == task_id:
                    task.completed = True
                    await query.edit_message_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:\n{task.task_text}")
                    break

    elif data.startswith("snooze_"):
        task_id = data[7:]
        if user_id in user_tasks:
            for task in user_tasks[user_id]:
                if task.task_id == task_id:
                    task.reminder_time += timedelta(hours=1)
                    asyncio.create_task(schedule_reminder(task, context.bot))
                    await query.edit_message_text(f"‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 1 —á–∞—Å:\n{task.task_text}")
                    break


def main():
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("ü§ñ –ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == '__main__':
    main()